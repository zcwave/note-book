/*
 * File: RandomTest.cpp
 * --------------------
 * This program tests sequences of random digits generated by the
 * random.h library to see whether they seem to be random.
 */

#include <iostream>
#include <cmath>
#include "random.h"
using namespace std;

const int MIN_LENGTH = 1;
const int MAX_LENGTH = 4;
const int N_TRIALS = 10000000;

/* Function prototypes */

void randomTest(int nDigits);
int generateRandomSequence(int nDigits);
void analyzeStatistics(int counts[], int n);
int raiseToPower(int base, int k);

/* Main program */

int main() {
   for (int i = MIN_LENGTH; i <= MAX_LENGTH; i++) {
      randomTest(i);
   }
   return 0;
}

void randomTest(int nDigits) {
   int nValues = raiseToPower(10, nDigits);
   int *counts = new int[nValues];
   for (int i = 0; i < nValues; i++) {
      counts[i] = 0;
   }
   for (int i = 0; i < N_TRIALS; i++) {
      counts[generateRandomSequence(nDigits)]++;
   }
   cout << nDigits << ": ";
   analyzeStatistics(counts, nValues);
   delete[] counts;
}

int generateRandomSequence(int nDigits) {
   int result = 0;
   for (int i = 0; i < nDigits; i++) {
      result = result * 10 + randomInteger(0, 9);
   }
   return result;
}

void analyzeStatistics(int counts[], int n) {
   int low = counts[0];
   int high = counts[0];
   int sum = 0;
   for (int i = 0; i < n; i++) {
      if (counts[i] < low) low = counts[i];
      if (counts[i] > high) high = counts[i];
      sum += counts[i];
   }
   double mean = double(sum) / n;
   double ssq = 0;
   for (int i = 0; i < n; i++) {
      double delta = mean - counts[i];
      ssq += delta * delta;
   }
   double sigma = sqrt(ssq / n);
   cout << "mean = " << mean << " [" << low << "-" << high << "]  sigma = " << sigma << endl;
}

/*
 * Function: raiseToPower
 * Usage: power = raiseToPower(base, k);
 * -------------------------------------
 * Returns base raised to the kth power.  This function is
 * overloaded to accept either an int or a double for base.
 */

int raiseToPower(int base, int k) {
   int result = 1;
   for (int i = 0; i < k; i++) {
      result *= base;
   }
   return result;
}
